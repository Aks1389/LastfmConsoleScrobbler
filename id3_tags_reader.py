import tinytag
import time
from datetime import datetime

# track = tinytag.TinyTag.get('D:\My Documents\Моя музыка\Музыка\_Singles for Plex\Florida Keys (feat. Charley Young) - Seth Duncan.flac')

# print(track)


# artist[i] (Required) : The artist name.
# track[i] (Required) : The track name.
# timestamp[i] (Required) : The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
# album[i] (Optional) : The album name.
# context[i] (Optional) : Sub-client version (not public, only enabled for certain API keys)
# streamId[i] (Optional) : The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio
# chosenByUser[i] (Optional) : Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified
# trackNumber[i] (Optional) : The track number of the track on the album.
# mbid[i] (Optional) : The MusicBrainz Track ID.
# albumArtist[i] (Optional) : The album artist - if this differs from the track artist.
# duration[i] (Optional) : The length of the track in seconds.
# api_key (Required) : A Last.fm API key.
# api_sig (Required) : A Last.fm method signature. See authentication for more information.
# sk (Required) : A session key generated by authenticating a user via the authentication protocol.



def get_track_info(track_path):
    track = tinytag.TinyTag.get(track_path)
    
    return {
        "artist": track.artist,
        "track": track.title,
        "album": track.album,
        "duration": track.duration,
        "chosenByUser": 1
    }

def get_track_list(filepath, start_time):
    # batch_track_limit = 50
    date_time = datetime.strptime(start_time, '%d-%m-%Y_%H:%M %z')
    start_timestamp = time.mktime(date_time.timetuple())
    with open(filepath, "r", encoding='utf-8') as file:
        tracklist = file.read().splitlines()
    
    tracks = {}
    prev_track_duration = 0
    for i in range(0, len(tracklist)):
        track_info = get_track_info(tracklist[i])
        if i==0:
            timestamp = start_timestamp
        else:
            timestamp += prev_track_duration + 30
        track = {
            f"artist[{i}]": track_info["artist"],
            f"track[{i}]": track_info["track"],
            f"album[{i}]": track_info["album"],
            f"timestamp[{i}]": int(timestamp),
            f"chosenByUser[{i}]": 1
        }
        prev_track_duration = track_info["duration"]
        tracks.update(track)
    return tracks